{"version":3,"file":"extension.js","mappings":"kCAAAA,EAAOC,QAAUC,QAAQ,S,GCCrBC,EAA2B,CAAC,EAGhC,SAASC,EAAoBC,GAE5B,IAAIC,EAAeH,EAAyBE,GAC5C,QAAqBE,IAAjBD,EACH,OAAOA,EAAaL,QAGrB,IAAID,EAASG,EAAyBE,GAAY,CAGjDJ,QAAS,CAAC,GAOX,OAHAO,EAAoBH,GAAUL,EAAQA,EAAOC,QAASG,GAG/CJ,EAAOC,OACf,C,uGCpBA,eA6CA,oBAAyBQ,GAIxBC,QAAQC,IAAI,4DAEZF,EAAQG,cAAcC,KAAKC,EAAOC,UAAUC,sCAAsC,aAAc,CAC/FC,6BAA6BC,EAA+BC,EAA2BC,GACtF,MAAMC,EAAYH,EAASI,uBAAuBH,GAClD,GAAIE,EAAW,CACd,MAAME,EAAOL,EAASM,QAAQH,GACxBI,EAAOP,EAASM,UAChBE,EAAQ,0DACd,IAAIC,EAAqC,CAAC,EAC1C,IAAIC,EACJ,KAAQA,EAAQF,EAAMG,KAAKJ,IAAQ,CAClC,MAAMK,EAAQF,EAAM,GAAGG,MAAM,KAAKC,KAAIC,GAAKA,EAAEC,SAC7C,IAEIC,GADAC,EADOR,EAAM,GACDG,MAAM,MACPK,EAAKC,OAAS,GAAK,MAClC,IAAK,IAAIC,EAAI,EAAGA,EAAIR,EAAMO,OAAQC,IAEjCX,EADWG,EAAMQ,IACHH,C,CAGhB,IAAKR,EAAQJ,GAAO,CACnB,IAAIgB,EAAOrB,EAASM,QAAQ,IAAIV,EAAO0B,MAAMrB,EAASoB,KAAM,EAAGpB,EAASoB,KAAMlB,EAAUoB,IAAIC,UAAY,IACxG,MAAM,MAAEC,EAAK,IAAEF,GAvEpB,SAAuCG,EAAqBC,EAAoBC,GAC/E,IAAIC,EACAC,EAAc,EAIlB,MAAMC,EAAqB,wCAC3B,IAAIC,EAAiC,KAGrC,KAAOA,EAASD,EAAWpB,KAAKe,IAAc,CAC7C,MAAMD,EAAQO,EAAOC,MAAQ,EACvBV,EAAME,EAAQO,EAAO,GAAGb,OAE9B,GAAIM,GAASE,GAAcJ,GAAOK,EAAU,CAC3CC,EAAqBG,EAAO,GAC5BF,EAAcL,EACd,K,EAMF,GAAII,EAAoB,CACvB,MAAMK,EAAwB,OAC9B,IAAIC,EAA8C,KAClD,MAAOA,EAAsBD,EAAcvB,KAAKkB,OAChCM,EAAoBF,MAAQ,EAAIH,EAAcK,EAAoB,GAAGhB,QACtES,KAKXO,IACHN,EAAqBA,EAAmBO,UAAU,EAAGF,EAAcG,W,CAIrE,OAAOR,EACN,CAAEJ,MAAOK,EAAaP,IAAKO,EAAcD,EAAmBV,OAAS,GACrE,CAAEM,MAAO,EAAGF,IAAK,EACnB,CA8B4Be,CAA8BjB,EAAMlB,EAAUoB,IAAIC,UAAY,EAAGrB,EAAUoB,IAAIC,UAAY,GAC5GK,EAAqBR,EAAKe,UAAUX,EAAQ,EAAGF,GACrD,IAAIL,EACJ,IADIA,EAAOW,EAAmBhB,MAAM,MAC3BM,OAAS,GAAKV,EAAQS,EAAK,IAAK,CACxC,IAAIqB,EAAIrB,EAAKsB,QACb,OAAO,IAAI5C,EAAO6C,sBAAsBtC,EAAW,GAAGM,EAAQ8B,KAAKA,KAAKrB,EAAKwB,KAAK,O,CAEnF,OAAO,IAAI9C,EAAO6C,sBAAsBtC,EAAW0B,E,CAEpD,GAAI1B,GAAaA,EAAUwC,SAAS1C,GACnC,OAAO,IAAIL,EAAO6C,sBAAsBtC,EAAWM,EAAQJ,GAAQA,E,CAGrE,OAAO,IACR,IAGF,EAGA,wBAA+B,C","sources":["../external commonjs \"vscode\"","../webpack/bootstrap",".././src/extension.ts"],"sourcesContent":["module.exports = require(\"vscode\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// The module 'vscode' contains the VS Code extensibility API\r\n// Import the module and reference it with the alias vscode in your code below\r\nimport * as vscode from 'vscode';\r\nfunction getExactExpressionStartAndEnd(lineContent: string, looseStart: number, looseEnd: number): { start: number; end: number } {\r\n\tlet matchingExpression: string | undefined = undefined;\r\n\tlet startOffset = 0;\r\n\r\n\t// Some example supported expressions: myVar.prop, a.b.c.d, myVar?.prop, myVar->prop, MyClass::StaticProp, *myVar\r\n\t// Match any character except a set of characters which often break interesting sub-expressions\r\n\tconst expression: RegExp = /([^()\\[\\]{}<>\\s+\\-/%~#^;=|,`!]|\\->)+/g;\r\n\tlet result: RegExpExecArray | null = null;\r\n\r\n\t// First find the full expression under the cursor\r\n\twhile (result = expression.exec(lineContent)) {\r\n\t\tconst start = result.index + 1;\r\n\t\tconst end = start + result[0].length;\r\n\r\n\t\tif (start <= looseStart && end >= looseEnd) {\r\n\t\t\tmatchingExpression = result[0];\r\n\t\t\tstartOffset = start;\r\n\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n\r\n\t// If there are non-word characters after the cursor, we want to truncate the expression then.\r\n\t// For example in expression 'a.b.c.d', if the focus was under 'b', 'a.b' would be evaluated.\r\n\tif (matchingExpression) {\r\n\t\tconst subExpression: RegExp = /\\w+/g;\r\n\t\tlet subExpressionResult: RegExpExecArray | null = null;\r\n\t\twhile (subExpressionResult = subExpression.exec(matchingExpression)) {\r\n\t\t\tconst subEnd = subExpressionResult.index + 1 + startOffset + subExpressionResult[0].length;\r\n\t\t\tif (subEnd >= looseEnd) {\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (subExpressionResult) {\r\n\t\t\tmatchingExpression = matchingExpression.substring(0, subExpression.lastIndex);\r\n\t\t}\r\n\t}\r\n\r\n\treturn matchingExpression ?\r\n\t\t{ start: startOffset, end: startOffset + matchingExpression.length - 1 } :\r\n\t\t{ start: 0, end: 0 };\r\n}\r\n// This method is called when your extension is activated\r\n// Your extension is activated the very first time the command is executed\r\nexport function activate(context: vscode.ExtensionContext) {\r\n\r\n\t// Use the console to output diagnostic information (console.log) and errors (console.error)\r\n\t// This line of code will only be executed once when your extension is activated\r\n\tconsole.log('Congratulations, your extension \"TsDebug\" is now active!');\r\n\r\n\tcontext.subscriptions.push(vscode.languages.registerEvaluatableExpressionProvider('typescript', {\r\n\t\tprovideEvaluatableExpression(document: vscode.TextDocument, position: vscode.Position, token: vscode.CancellationToken): vscode.ProviderResult<vscode.EvaluatableExpression> {\r\n\t\t\tconst wordRange = document.getWordRangeAtPosition(position);\r\n\t\t\tif (wordRange) {\r\n\t\t\t\tconst word = document.getText(wordRange);\r\n\t\t\t\tconst code = document.getText();\r\n\t\t\t\tconst regex = /import\\s*{\\s*([\\w\\s,]+)\\s*}\\s*from\\s*['\"]([\\w./]+)['\"]/g;\r\n\t\t\t\tvar tsTypes: { [key: string]: string } = {};\r\n\t\t\t\tlet match;\r\n\t\t\t\twhile ((match = regex.exec(code))) {\r\n\t\t\t\t\tconst types = match[1].split(',').map(t => t.trim());\r\n\t\t\t\t\tvar file = match[2];\r\n\t\t\t\t\tvar args = file.split(\"/\");\r\n\t\t\t\t\tvar cls = args[args.length - 1] + \"_1.\";\r\n\t\t\t\t\tfor (let i = 0; i < types.length; i++) {\r\n\t\t\t\t\t\tconst tp = types[i];\r\n\t\t\t\t\t\ttsTypes[tp] = cls;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (!tsTypes[word]) {\r\n\t\t\t\t\tlet line = document.getText(new vscode.Range(position.line, 0, position.line, wordRange.end.character + 1));\r\n\t\t\t\t\tconst { start, end } = getExactExpressionStartAndEnd(line, wordRange.end.character + 1, wordRange.end.character + 1);\r\n\t\t\t\t\tconst matchingExpression = line.substring(start - 1, end);\r\n\t\t\t\t\tvar args = matchingExpression.split('.');\r\n\t\t\t\t\tif (args.length > 1 && tsTypes[args[0]]) {\r\n\t\t\t\t\t\tvar w = args.shift() as string;\r\n\t\t\t\t\t\treturn new vscode.EvaluatableExpression(wordRange, `${tsTypes[w]}${w}.${args.join('.')}`);\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn new vscode.EvaluatableExpression(wordRange, matchingExpression);\r\n\t\t\t\t}\r\n\t\t\t\tif (wordRange && wordRange.contains(position)) {\r\n\t\t\t\t\treturn new vscode.EvaluatableExpression(wordRange, tsTypes[word] + word);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn null;\r\n\t\t}\r\n\t}));\r\n\r\n}\r\n\r\n// This method is called when your extension is deactivated\r\nexport function deactivate() { }\r\n"],"names":["module","exports","require","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","context","console","log","subscriptions","push","vscode","languages","registerEvaluatableExpressionProvider","provideEvaluatableExpression","document","position","token","wordRange","getWordRangeAtPosition","word","getText","code","regex","tsTypes","match","exec","types","split","map","t","trim","cls","args","length","i","line","Range","end","character","start","lineContent","looseStart","looseEnd","matchingExpression","startOffset","expression","result","index","subExpression","subExpressionResult","substring","lastIndex","getExactExpressionStartAndEnd","w","shift","EvaluatableExpression","join","contains"],"sourceRoot":""}